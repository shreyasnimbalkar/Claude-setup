name: Claude ML + Security + API Key Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  claude_review:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Step 2: Prepare diff and code files
      - name: Extract code and diff
        run: |
          mkdir -p extracted
          find . -name "*.py" -exec cp {} extracted/ \;
          cat extracted/*.py > combined_code.py || echo "# no code" > combined_code.py
          git fetch origin main || true
          git diff origin/main...HEAD > diff.txt || echo "# no diff" > diff.txt
          echo "===DIFF START===" >> review_input.txt
          cat diff.txt >> review_input.txt
          echo "===DIFF END===" >> review_input.txt
          echo "===CODE START===" >> review_input.txt
          cat combined_code.py >> review_input.txt
          echo "===CODE END===" >> review_input.txt

      # Step 3: Claude Review
      - name: Run Claude for Security + API Leak Detection
        id: claude_review
        uses: anthropics/claude-code-action@v1
        with:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.TESTING_TOKEN }}
          prompt: |
            You are a **security auditor** reviewing code for leaked API keys, secrets, or tokens.
            Check the code and diff for patterns such as:
            - "sk_", "pk_", "ghp_", "AIza", "xoxb-", "ya29.", "eyJ", "api_key", "token", "password"
            - Any variable containing sensitive-looking data (long random strings, base64, JWT, etc.)
            - Keys that match OpenAI, AWS, Google, GitHub, or Slack formats.

            Severity levels:
            - ‚ùå HIGH ‚Äî definite secret or credential leak
            - üü° MEDIUM ‚Äî possible sensitive string (needs human review)
            - ‚úÖ No issues ‚Äî clean code

            Example output format:
            ‚ùå [HIGH] file.py:23 ‚Äì Hardcoded API key found ("sk_test_...")
            ‚úÖ All checks passed: No high or medium severity issues detected.

            --- REVIEW CONTENT BELOW ---
            $(cat review_input.txt)

      # Step 4: Save output
      - name: Save Claude output
        run: |
          echo "${{ steps.claude_review.outputs.output }}" > claude_output.txt

      # Step 5: Post results as comment
      - name: Post Claude review as comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TESTING_TOKEN }}
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('claude_output.txt', 'utf8').trim();
            const prNumber = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: output || "‚úÖ Claude found no issues."
            });

      # Step 6: Fail if HIGH issues found
      - name: Block merge if secrets found
        run: |
          if grep -q "‚ùå" claude_output.txt || grep -q "HIGH" claude_output.txt; then
            echo "‚ùå Claude detected leaked keys or secrets. Blocking merge."
            exit 1
          else
            echo "‚úÖ No secret leaks detected. Merge allowed."
          fi
