name: Claude ML + Security + API Key Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  claude_review:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Extract code and prepare diff
      - name: Extract code and diff
        run: |
          mkdir -p extracted
          # Convert notebooks to .py
          for nb in $(find . -name "*.ipynb"); do
            jupyter nbconvert --to script "$nb" --output-dir extracted
          done
          # Copy all Python files
          find . -name "*.py" -exec cp {} extracted/ \;
          # Combine all code
          cat extracted/*.py > combined_code.py || echo "# no code" > combined_code.py
          # Create PR diff
          git fetch origin main || true
          git diff origin/main...HEAD > diff.txt || echo "# no diff" > diff.txt

      # Step 3: Run Claude review
      - name: Claude ML + Security + API Key Review
        id: claude_review
        uses: anthropics/claude-code-action@v1
        with:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.CLAUDE_GITHUB_PAT }}
          prompt: |
            You are a **senior ML engineer & security auditor**. Review the PR for:

            1. Machine Learning correctness (data leakage, random seeds, reproducibility)
            2. Security vulnerabilities (RCE, unsafe deserialization, injection, data leaks)
            3. Hardcoded secrets or API keys (ANYTHING that looks like 'api_key', 'token', 'password', 'sk_test_', 'sk_live_')
            4. Code hygiene & reproducibility

            Focus only on new code introduced in this PR.

            ---
            ## CODE TO REVIEW:
            DIFF:
            ```
            $(cat diff.txt)
            ```
            FULL CODE:
            ```
            $(cat combined_code.py)
            ```

            ---
            ## OUTPUT FORMAT:
            - For each issue, include:
              - File & Line
              - Severity: High / Medium
              - Category (e.g., secret_exposure, pickle_injection, data_leakage)
              - Description
              - Exploit / Impact
              - Fix Recommendation
            - Only report High or Medium severity with confidence ≥ 8
            - Explicitly flag any hardcoded API keys as HIGH severity

            IMPORTANT: Even if no issues are found, explicitly include a final summary line like:
            "✅ All checks passed: No high or medium severity issues detected."

      # Step 4: Save Claude output (fallback if empty)
      - name: Save Claude output
        run: |
          output="${{ steps.claude_review.outputs.output }}"
          if [ -z "$output" ]; then
            echo "✅ Claude review completed: No high or medium severity issues detected."
          else
            echo "$output"
          fi > claude_output.txt

      # Step 5: Post review comment to PR
      - name: Post Claude comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('claude_output.txt', 'utf8').trim();
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      # Step 6: Block merge if HIGH issues found
      - name: Block merge if issues found
        run: |
          if grep -q "❌" claude_output.txt || grep -q "HIGH" claude_output.txt; then
            echo "Claude review failed — issues detected. Blocking merge."
            exit 1
          else
            echo "✅ No critical issues detected. Merge allowed."
