name: Claude ML & Security Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  id-token: write  # Required for OIDC authentication
  issues: write

jobs:
  ml_security_review:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Extract notebook or Python code
      - name: Extract notebook and Python code
        id: extract_code
        run: |
          mkdir -p extracted
          # Extract .ipynb files into .py
          for nb in $(find . -name "*.ipynb"); do
            echo "Extracting code from $nb..."
            jupyter nbconvert --to script "$nb" --output-dir extracted
          done
          # Copy all .py files
          find . -name "*.py" -exec cp {} extracted/ \;
          # Combine for Claude
          cat extracted/*.py > combined_code.py || echo "# no code" > combined_code.py

      # Step 3: Get PR Diff
      - name: Get PR diff
        id: get_diff
        run: |
          git fetch origin main || true
          git diff origin/main...HEAD > diff.txt || echo "# no diff" > diff.txt

      # Step 4: Run Claude combined ML + Security Review
      - name: Claude ML + Security Review
        id: run_claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.TESTING_TOKEN }}
          prompt: |
            You are a **senior ML engineer and security auditor**.
            Review the pull request‚Äôs Python / notebook code for:
            - Machine Learning correctness and reproducibility
            - Security vulnerabilities and code safety
            - Code hygiene, credentials handling, and documentation

            ---

            ## üîç MACHINE LEARNING REVIEW CHECKLIST
            1. No data leakage between train/test splits
            2. Random seeds are set for reproducibility
            3. No hardcoded file paths or credentials
            4. Model save/load paths are parameterized
            5. Data preprocessing is deterministic
            6. No API keys or tokens committed
            7. Training code follows clean ML best practices
            8. Output files and logs handled securely
            9. Sensitive data not printed or logged
            10. Code is modular, clear, and documented

            ---

            ## üß† SECURITY REVIEW (STRICT)
            ${{
              join([
                'You are a senior security engineer conducting a focused security review of the changes on this branch.',
                'Focus ONLY on security implications introduced in this PR.',
                'Analyze input validation, authentication, authorization, crypto, secrets, injection, and data exposure risks.'
              ], '\n')
            }}

            ### Context:
            FILES MODIFIED:
            \n$(git diff --name-only origin/main...HEAD)\n

            DIFF CONTENT:
            \n$(cat diff.txt)\n

            CODEBASE CONTENT:
            \n$(cat combined_code.py)\n

            ---

            ## OUTPUT FORMAT (MANDATORY)
            Respond only with a Markdown report structured as follows:

            ### üß© Machine Learning Review
            - ‚úÖ PASS / ‚ùå FAIL with short explanations for each checklist item above.

            ### üîí Security Review Findings
            For each vulnerability, include:
            - **File & line number**
            - **Severity (High/Medium/Low)**
            - **Category** (e.g., sql_injection, auth_bypass, secret_exposure)
            - **Description**
            - **Exploit Scenario**
            - **Fix Recommendation**
            - **Confidence Score (1-10)**

            Only include **HIGH or MEDIUM** severity issues with **confidence ‚â• 8**.
            Skip theoretical or low-impact findings.

            ### ‚úÖ Summary
            - Total Findings
            - High Severity Count
            - Medium Severity Count
            - Confidence Summary

            End with:
            > ‚úÖ All checks passed (if no findings)
            or
            > ‚ùå Found security/ML issues requiring attention.

      # Step 5: Save Claude output
      - name: Save Claude output
        run: echo "${{ steps.run_claude.outputs.output }}" > claude_review_output.txt

      # Step 6: Post Claude Review Comment on PR
      - name: Post Claude Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TESTING_TOKEN }}
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('claude_review_output.txt', 'utf8').trim();
            if (!output || output.length === 0) {
              console.log("‚ö†Ô∏è No output from Claude. Skipping comment.");
              return;
            }
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      # Step 7 (Optional): Block Merge if Issues Found
      - name: Block merge if Claude flags issues
        run: |
          if grep -q "‚ùå" claude_review_output.txt || grep -q "HIGH" claude_review_output.txt; then
            echo "Claude review failed ‚Äî security or ML issues found. Blocking merge."
            exit 1
          else
            echo "‚úÖ No major issues detected. Merge allowed."
          fi
